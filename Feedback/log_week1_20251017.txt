======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Ruixuan Han

Processing week 1

Your current Git repo size is about 2.05 MiB on disk

Found directories: .git, week1, week2, Feedback, week3
Found files: .gitignore, .Rhistory, README.md

Processing week 1: week1

Found 8 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: csvtospace.sh

Contents:

**********
#!/bin/bash

# Check if the file is given
if [ -z "$1" ]; then
  echo "Please provide a .csv file."
  exit 1
fi

# CHeck if file exists
if [ ! -f "$1" ]; then
  echo "File '$1' not found"
  exit 1
fi

# Define input and output files
input="$1"
result_dir="../results"
filename=$(basename "$input")
output="$result_dir/${filename%.csv}.txt"

# Convert .csv to space-separated
echo "Converting '$input' to '$output' ..."
tr ',' ' ' < "$input" > "$output"
echo "Done!"

**********

Output (first 500 chars):

**********
Please provide a .csv file.

**********
No errors.
======================================================================
Script: tiff2png.sh

Contents:

**********
#!/bin/bash

# Check if the files are provided.
if ls *.tif; then
    for f in *.tif; 
        do  
            echo "Converting $f"; 
            convert "$f"  "$(basename "$f" .tif).png"; 
        done
else
    echo "Please provide .tif files."
fi
**********

Output (first 500 chars):

**********
Please provide .tif files.

**********
Errors:
**********
ls: cannot access '*.tif': No such file or directory

**********
======================================================================
Script: boilerplate.sh

Contents:

**********
#!/bin/sh
# Author: Your Name your.login@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2019

echo -e "\nThis is a shell script! \n"

#exit
**********

Output (first 500 chars):

**********

This is a shell script! 


**********
No errors.
======================================================================
Script: ConcatenateTwoFiles.sh

Contents:

**********
#!/bin/bash

# Check if the files are provided
if [ $# -ne 3 ]; then
    echo "PLease provide the files."
    exit 1
fi

cat $1 > $3
cat $2 >> $3
echo "Merged File is"
cat $3
**********

Output (first 500 chars):

**********
PLease provide the files.

**********
No errors.
======================================================================
Script: tabtocsv.sh

Contents:

**********
#!/bin/sh
# Author: ruixuan.han25@imperial.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2025

# Check if there is a file provided
if [ -z "$1"]; then
    echo "Error: Please provide an input file."
    exit 1
fi
# Check if the input file exists
if [ ! -f "$1" ]; then
    echo "File '$1' not found!"
    exit 1
fi

echo "Creating a comma delimited version of $1 ..."
cat $1 | tr -s "\t" "," >> $1.csv
echo "Done!"
exit
**********

Output (first 500 chars):

**********
Error: Please provide an input file.

**********
No errors.
======================================================================
Script: MyExampleScript.sh

Contents:

**********
#!/bin/sh

MSG1="Hello"
MSG2=$USER
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo
**********

Output (first 500 chars):

**********
Hello mhasoba
Hello mhasoba


**********
No errors.
======================================================================
Script: variables.sh

Contents:

**********
#!/bin/sh

## Illustrates the use of variables 

# Special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"

if [ $# -lt 2 ]; then
    echo "The arguments are $@"
    echo "The first argument is $1"
    echo "The second argument is $2"
else
    echo "No arguments are provided."
fi
echo

# Assigned Variables; Explicit declaration:
MY_VAR='some string' 
echo 'the current value of the variable is:' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

## Assigned Variables; Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

## Assigned Variables; Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM
**********

Output (first 500 chars):

**********
This script was called with 0 parameters
The script's name is variables.sh
The arguments are 
The first argument is 
The second argument is 

the current value of the variable is: some string

Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********
Errors:
**********
expr: syntax error: missing argument after ‘+’

**********
======================================================================
Script: CountLines.sh

Contents:

**********
#!/bin/bash

# Check if the file is provided
if [ -z "$1" ]; then
    echo "The file is not provided."
    exit 1
fi

NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"
echo
**********

Output (first 500 chars):

**********
The file is not provided.

**********
No errors.

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 10
Scripts successful: 8
Scripts with errors: 2
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

